package j_collection;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;
import java.util.Set;

public class HashMapClass {

	
	public static void main(String[] args) {
		
		/*
		 * Object put(Object key, Object value) : 지저된 키와 값을 저장한다.
		 * Object remove(Object key) : 지정된 키로 저장된 값을 제거한다.
		 * Object get(Object key) : 지정된 키의 값(없으면 null)을 반환한다.
		 * Set keySet() : 저장된 모든 키를 Set의 형테로 반환한다.cf.Set: 배열형태의 중복없는 ;?
		 * object = 모든 클래스의 부모 class다. 어레이든 뭐든
		 * 
		 */
		
		HashMap<String, Object> map = new HashMap<>();
		
		map.put("number", 10);
		
		map.put("name","홍길동");
		
		map.put("scanner", new Scanner(System.in));
		
		Scanner object = (Scanner)map.get("scanner");
		//object.nextLine();
				
//		System.out.println(map);
		
		map.put("name", "이순신"); //덮어쓰게 된다.
		
//		System.out.println(map); //1개의 키로 하나의 값만 저장할 수 있다.
		//hashmap 은 순서를 정할 기준이 없음
		
		map.remove("number");
		
//		System.out.println(map);
		
		Object value = map.get("name"); //타입이 오브젝트이다.

//		System.out.println(value);
		
//		System.out.println(((String)value).substring(0,1));
		
		
		
		Set<String> keys = map.keySet(); //저장된 모든 키
		
//		for(String key : keys){
//			System.out.println(key + " : " + map.get(key));
//		}
		
		//set 키값을 배열로 받아서 
		//keyset = for 문에서 저렇게 쓰이면 해쉬맵에서 키를 계속 꺼내서  실행한다.
		
		//hashmap은 데이터베이스의 테이블을 표현하기 위해 사용된다. 
		//sqldev.의 테이블의 구조를 표현할때 컬럼을 해쉬맵에다가 키로 저장한다. 값을 해쉬맵에 밸류로 저장한다. 
		//어레이 리스트에 해쉬맵을 저장해서 표현한다. 
		
		
		ArrayList<HashMap<String, Object>> table = new ArrayList<>();
		
		HashMap<String, Object> row = new HashMap<>();
		
		row.put("CART_MEMBER", "a001");
		row.put("CART_NO", "2005040100001");
		row.put("CART_PROD", "P10100001");
		row.put("CART_QTY", 5);
		
		table.add(row);
		
		/*
		 * 래퍼클래스 : 기본형 타입을 객체로 사용해야 할 때 대신 사용하는 클래스
		 * - byte : Byte
		 * - short : Short
		 * - int : Integer
		 * - long : long
		 * - float : Float
		 * - double : Double
		 * - char : Character
		 * - boolean : Boolean
		 * -기본형타입과 래퍼클래스 끼리 형변환도 된다. 자동으로.
		 */
		//앞으로 자바와 데이터베이스를 연결해서 쓸 것.
		
		//회원 테이블 
		//아이디, 비밀번호,이름,전화번호
		ArrayList<HashMap<String, Object>> users = new ArrayList<>();
		
		HashMap<String, Object> user = new HashMap<>();
		user.put("id", "admin");
		user.put("password","admin123");
		user.put("name","관리자");
		user.put("tel", "010-1234-5678");
		
		users.add(user);
		
		user.put("id", "admin2");
		user.put("password","admin2123");
		user.put("name","관리자2");
		user.put("tel", "010-1234-56782");
		user.put("test", "test");
		
		users.add(user); //이상황에서 유저는 유저를 덮어썼고, 어레이 리스트에는 리스트가 하나 더 추가 된거다.
		//이거는 덮어쓸꺼면 하면 안된다. 

/*		Set<String> key1 = user.keySet();
		for(String key : key1){
			System.out.println(key + " : " + user.get(key));
			}
*/
		HashMap<String, Object> user2 = new HashMap<>();
		user2.put("id", "test");
		user2.put("password","test123");
		user2.put("name","테스터");
		user2.put("tel", "010-4321-5678");
		
		users.add(user2);
		
/*		Set<String> key1 = user.keySet();
		Set<String> key2 = user2.keySet();		
		for(String key : key1){
		System.out.println(key + " : " + user.get(key));
		}

		for(String key : key2){
		System.out.println(key + " : " + user2.get(key));
		}
		System.out.println(users);
*/
		//출력하는 방법.
		for(int i =0; i <users.size(); i++){
			HashMap<String, Object> u = users.get(i);
			for(String key : u.keySet()){
				System.out.println(key + " : " + u.get(key));
			}
		}
		
/*		for(HashMap<String, Object> u : users){ //향상된 포문인데, 인덱스를 알 수 없다. 값을 변경할 수 없다. 
			for(String key : u.keySet()){
				System.out.println(key + " : " + u.get(key));
			}
		}*/
		
		
	}
}
